[gd_scene load_steps=3 format=2]

[ext_resource path="res://volume.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

const TTSDriver = preload(\"res://TTSDriver.gdns\")
var tts

func _process(delta):
	if tts.is_speaking():
		get_node(\"ColorRect\").color = Color(1, 0, 0)
	else:
		get_node(\"ColorRect\").color = Color(0, 0, 0)

func _ready():
	tts = TTSDriver.new()
	set_process(true)
	var voices = tts.get_voices();
	for v in voices:
		var readable_name = v[\"name\"]
		readable_name = readable_name.replace(\"com.apple.speech.synthesis.voice.\", \"\")
		readable_name = readable_name.replace(\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Speech\\\\Voices\\\\Tokens\\\\\", \"\")
		get_node(\"OptionButton\").add_item(\"\\\"\" + readable_name + \"\\\" speaks \" + v[\"language\"])
		get_node(\"OptionButton\").set_item_metadata(get_node(\"OptionButton\").get_item_count() - 1, v[\"name\"])
	get_node(\"HSliderVol\").value = tts.get_volume()
	get_node(\"HSliderRate\").value = tts.get_rate()
	get_node(\"HSliderPitch\").value = tts.get_pitch()

func _on_voice_selected(ID):
	tts.set_voice(get_node(\"OptionButton\").get_item_metadata(ID))

func _on_speak_pressed():
	tts.speak(get_node(\"LineEdit\").text, false)

func _on_volmue_changed(value):
	tts.set_volume(value)

func _on_interrupt_pressed():
	tts.speak(\"Halt!\", true)

func _on_stop_pressed():
	tts.stop()

func _on_rate_value_changed(value):
	tts.set_rate(value)

func _on_HSliderPitch_value_changed(value):
	tts.set_pitch(value)
"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 2.0
margin_right = 2.0
script = SubResource( 1 )

[node name="LabelVoice" type="Label" parent="."]
margin_left = 18.0
margin_top = 20.0
margin_right = 68.0
margin_bottom = 40.0
text = "Voice:"

[node name="OptionButton" type="OptionButton" parent="."]
margin_left = 88.0
margin_top = 20.0
margin_right = 778.0
margin_bottom = 45.0
toggle_mode = false

[node name="LabelVolume" type="Label" parent="."]
margin_left = 18.0
margin_top = 60.0
margin_right = 73.0
margin_bottom = 80.0
text = "Volume:"

[node name="LabelRate" type="Label" parent="."]
margin_left = 18.0
margin_top = 100.0
margin_right = 73.0
margin_bottom = 120.0
text = "Rate:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LineEdit" type="LineEdit" parent="."]
margin_left = 18.0
margin_top = 420.0
margin_right = 778.0
margin_bottom = 449.0
text = "test text-to-speech"

[node name="Button" type="Button" parent="."]
margin_left = 618.0
margin_top = 460.0
margin_right = 778.0
margin_bottom = 485.0
text = "Speak"

[node name="Button2" type="Button" parent="."]
margin_left = 618.0
margin_top = 540.0
margin_right = 778.0
margin_bottom = 565.0
text = "Halt!"

[node name="Button3" type="Button" parent="."]
margin_left = 618.0
margin_top = 500.0
margin_right = 778.0
margin_bottom = 525.0
text = "Stop"

[node name="HSliderVol" type="HSlider" parent="."]
margin_left = 88.0
margin_top = 60.0
margin_right = 468.0
margin_bottom = 80.0
value = 100.0

[node name="HSliderRate" type="HSlider" parent="."]
margin_left = 88.0
margin_top = 100.0
margin_right = 468.0
margin_bottom = 120.0
min_value = -100.0
value = 100.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LabelPitch" type="Label" parent="."]
margin_left = 18.0
margin_top = 140.0
margin_right = 73.0
margin_bottom = 160.0
text = "Pitch:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSliderPitch" type="HSlider" parent="."]
margin_left = 88.0
margin_top = 140.0
margin_right = 468.0
margin_bottom = 160.0
min_value = -10.0
max_value = 10.0
value = 0.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
margin_left = 18.0
margin_top = 460.0
margin_right = 198.0
margin_bottom = 560.0
color = Color( 0, 0, 0, 1 )

[node name="Icon" type="Sprite" parent="ColorRect"]
position = Vector2( 90, 30 )
texture = ExtResource( 1 )

[node name="LabelISS" type="Label" parent="ColorRect"]
margin_top = 65.0
margin_right = 180.0
margin_bottom = 100.0
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "SPEAKING"
align = 1
valign = 1

[connection signal="item_selected" from="OptionButton" to="." method="_on_voice_selected"]
[connection signal="pressed" from="Button" to="." method="_on_speak_pressed"]
[connection signal="pressed" from="Button2" to="." method="_on_interrupt_pressed"]
[connection signal="pressed" from="Button3" to="." method="_on_stop_pressed"]
[connection signal="value_changed" from="HSliderVol" to="." method="_on_volmue_changed"]
[connection signal="value_changed" from="HSliderRate" to="." method="_on_rate_value_changed"]
[connection signal="value_changed" from="HSliderPitch" to="." method="_on_HSliderPitch_value_changed"]
